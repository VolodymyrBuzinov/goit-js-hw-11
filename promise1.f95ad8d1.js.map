{"version":3,"sources":["js/promise1.js"],"names":["delay","ms","Promise","resolve","logger","time","console","log","then"],"mappings":"AAAA;AACA;AACA;AAEA,IAAMA,KAAK,GAAG,SAARA,KAAQ,CAAAC,EAAE,EAAI;AAChB,SAAOC,OAAO,CAACC,OAAR,CAAgBF,EAAhB,CAAP;AACH,CAFD;;AAIA,IAAMG,MAAM,GAAG,SAATA,MAAS,CAAAC,IAAI;AAAA,SAAIC,OAAO,CAACC,GAAR,0BAA8BF,IAA9B,QAAJ;AAAA,CAAnB,EAEA;;;AACAL,KAAK,CAAC,IAAD,CAAL,CAAYQ,IAAZ,CAAiBJ,MAAjB,GAA0B;;AAC1BJ,KAAK,CAAC,IAAD,CAAL,CAAYQ,IAAZ,CAAiBJ,MAAjB,GAA0B;;AAC1BJ,KAAK,CAAC,IAAD,CAAL,CAAYQ,IAAZ,CAAiBJ,MAAjB,GAA0B","file":"promise1.f95ad8d1.js","sourceRoot":"..\\src","sourcesContent":["// Напиши функцию delay(ms), которая возвращает промис, переходящий в состояние\r\n// \"resolved\" через ms миллисекунд.Значением исполнившегося промиса должно быть то кол - во\r\n// миллисекунд которое передали во время вызова функции delay.\r\n\r\nconst delay = ms => {\r\n    return Promise.resolve(ms);\r\n};\r\n\r\nconst logger = time => console.log(`Resolved after ${time}ms`);\r\n\r\n// Вызовы функции для проверки\r\ndelay(2000).then(logger); // Resolved after 2000ms\r\ndelay(1000).then(logger); // Resolved after 1000ms\r\ndelay(1500).then(logger); // Resolved after 1500ms"]}